- name: Provision Runner in AWS
  hosts: localhost
  gather_facts: False

  vars:
    profile: 'default'
    instance_type: 't2.micro'
    image: 'ami-07caf09b362be10b8'
    region: 'us-east-1'

  tasks:
    - name: Create Security Group
      amazon.aws.ec2_group:
        profile: "{{ profile }}"
        name: "myles-ansible-security-group"
        description: "Security group for EC2 instance gh self hosted runner"
        vpc_id: "vpc-0735f5b0267022664"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 98.208.42.143/32
        state: present
        tags:
          Name: "myles-ansible-security-group"
          Owner: "Myles"
          Client: "Internal"
          Environment: "Test"
          Project: "DOB"
          Application: "GitHub-Runner"
      register: security_group

    - name: Debug security group creation
      debug:
        var: security_group

    - name: Check if the key pair already exists
      amazon.aws.ec2_key_info:
        profile: "{{ profile }}"
        names: 
          - "myles-ansible-key"
      register: key_pair_check

    - name: Debug key pair check
      debug:
        var: key_pair_check

    - name: Create Key Pair
      amazon.aws.ec2_key:
        profile: "{{ profile }}"
        name: "myles-ansible-key"
        state: present
        key_type: "ed25519"
        region: "{{ region }}"
        file_name: "~/.ssh/myles-ansible-key.pem"
        tags:
          Owner: "Myles"
          Client: "Internal"
          Environment: "Test"
          Project: "DOB"
          Application: "Github-Runner"
      register: key_pair
      when: not key_pair_check.keypairs

    - name: Gather EC2 facts
      amazon.aws.ec2_instance_info:
        profile: "{{ profile }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "Myles-Self-Hosted-Runner"
          "tag:Owner": "Myles"
          "tag:Client": "Internal"
          "tag:Environment": "Test"
          "tag:Project": "DOB"
          "tag:Application": "GitHub-Runner"
      register: ec2_facts

    - name: Debug EC2 facts
      debug:
        var: ec2_facts

    - name: Create EC2 instance
      amazon.aws.ec2_instance:
        profile: "{{ profile }}"
        region: "{{ region }}"
        key_name: "{{ key_pair_check.keypairs[0].key_name }}"
        image_id: "{{ image }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ security_group.group_name }}"
        vpc_subnet_id: "subnet-0899fcbb3005800f4"
        network:
          assign_public_ip: true
        tags:
          Name: "Myles-Self-Hosted-Runner"
          Owner: "Myles"
          Client: "Internal"
          Environment: "Test"
          Project: "DOB"
          Application: "GitHub-Runner"
      when: "(ec2_facts.instances | selectattr('state.name', 'equalto', 'running') | list | count) == 0"
      register: ec2_instance

    - name: Determine instance ID to wait for
      set_fact:
        instance_id_to_wait: "{{ ec2_instance.instance_ids[0] if ec2_instance.changed else (ec2_facts.instances | selectattr('state.name', 'equalto', 'pending') | list | first).instance_id }}"
      when: ec2_instance.changed or (ec2_facts.instances | selectattr('state.name', 'equalto', 'pending') | list | count) > 0

    - name: Wait for the instance to be running
      amazon.aws.ec2_instance_info:
        profile: "{{ profile }}"
        region: "{{ region }}"
        filters:
          instance-id: "{{ instance_id_to_wait }}"
      register: instance_facts
      until: instance_facts.instances[0].state.name == 'running'
      retries: 10
      delay: 30
      when: instance_id_to_wait is defined

    - name: Refresh EC2 facts to ensure the instance is running
      amazon.aws.ec2_instance_info:
        profile: "{{ profile }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "Myles-Self-Hosted-Runner"
          "tag:Owner": "Myles"
          "tag:Client": "Internal"
          "tag:Environment": "Test"
          "tag:Project": "DOB"
          "tag:Application": "GitHub-Runner"
      register: refreshed_ec2_facts

    - name: Wait for SSH to be available
      wait_for:
        host: "{{ item.network_interfaces[0].association.public_ip }}"
        port: 22
        delay: 10
        timeout: 300
        state: started
      loop: "{{ refreshed_ec2_facts.instances }}"
      when: item.state.name == 'running'

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.network_interfaces[0].association.public_ip }}"
        groupname: ec2hosts
      loop: "{{ refreshed_ec2_facts.instances }}"
      when: item.state.name == 'running'  # Ensure the instance is running

- name: Runner
  hosts: ec2hosts
  become: yes
  vars:
    github_owner: 'myles-coleman'
    github_repo: 'learn-ansible'
    runner_token: "{{ lookup('env','RUNNER_TOKEN') }}"
    runner_name: 'ansible-runner'
    runner_work_dir: 'actions-runner'
    ansible_ssh_private_key_file: "~/.ssh/myles-ansible-key.pem"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    ansible_user: 'ec2-user'

  tasks:
    - name: Update system packages
      dnf:
        update_cache: yes

    - name: Install necessary packages
      dnf:
        name:
          - libicu
          - jq

    - name: Create a directory for the runner and install
      file:
        path: "/home/{{ ansible_user }}/actions-runner"
        state: directory

    - name: Check if the permissions of the actions-runner directory are correct
      stat:
        path: "/home/{{ ansible_user }}/actions-runner"
      register: runner_dir

    - name: Check current ownership and permissions of actions-runner directory
      stat:
        path: "/home/{{ ansible_user }}/actions-runner"
      register: actions_runner_dir

    - name: Change ownership and permissions of actions-runner directory
      file:
        path: "/home/{{ ansible_user }}/actions-runner"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
        recurse: yes
      when: actions_runner_dir.stat.pw_name != "{{ ansible_user }}" or
            actions_runner_dir.stat.gr_name != "{{ ansible_user }}" or
            actions_runner_dir.stat.mode != '0755'

    - name: Check if runner package is downloaded
      stat:
        path: "/tmp/actions-runner.tar.gz"
      register: runner_package

    - name: Download runner package
      get_url:
        url: "https://github.com/actions/runner/releases/download/v2.316.1/actions-runner-linux-x64-2.316.1.tar.gz"
        dest: "/tmp/actions-runner.tar.gz"
      when: not runner_package.stat.exists
      register: download_result

    - name: Extract runner package
      unarchive:
        src: "/tmp/actions-runner.tar.gz"
        dest: "/home/{{ ansible_user }}/actions-runner"
        mode: '0755'
        remote_src: yes
      when: download_result.changed

    - name: Ensure _diag directory exists
      file:
        path: "/home/{{ ansible_user }}/actions-runner/_diag"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Ensure permissions of all extracted files are correct
      file:
        path: "/home/{{ ansible_user }}/actions-runner"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
        recurse: yes

    - name: Check if runner is already configured
      stat:
        path: "/home/{{ ansible_user }}/actions-runner/.runner"
      register: runner_status

    - name: Configure runner
      become: no
      command: "./config.sh --url https://github.com/{{ github_owner }}/{{ github_repo }} --token {{ runner_token }} --unattended"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
      when: not runner_status.stat.exists

    - name: Check if _work directory exists
      stat:
        path: "/home/{{ ansible_user }}/actions-runner/_work"
      register: work_dir

    - name: Create _work directory
      file:
        path: "/home/{{ ansible_user }}/actions-runner/_work"
        state: directory
        mode: '0755'
      when: not work_dir.stat.exists

    - name: Check if runner service is already installed
      command: "./svc.sh status"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
      register: runner_service_status
      changed_when: false
      ignore_errors: True

    - name: Install runner service
      become: yes
      command: "./svc.sh install"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
      when: "'not installed' in runner_service_status.stdout"

    - name: Check if runner service is running
      command: "./svc.sh status"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
      register: runner_service_running_status
      changed_when: false

    - name: Start runner service
      become: yes
      command: "./svc.sh start"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
      when: runner_service_status.stdout.find('inactive') != -1